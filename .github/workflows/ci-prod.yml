name: "CI/CD Pipeline (Prod)"

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  # Job 1: Terraform - Infraestructura
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    environment: production # Usar entorno de GitHub para protecci칩n adicional

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        working-directory: infra
        run: |
          terraform init \
            -backend-config="bucket=voting-app-terraform-state-177816" \
            -backend-config="key=voting-app/prod.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}"

      - name: Terraform Plan (Prod)
        working-directory: infra
        run: terraform plan -var-file=prod.tfvars

      - name: Terraform Apply (Prod)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        working-directory: infra
        run: terraform apply -auto-approve -var-file=prod.tfvars

  # Job 2: Construir y publicar im치genes Docker
  build:
    name: Build & Push Docker Images
    needs: terraform
    runs-on: ubuntu-latest
    environment: production # Usar entorno de GitHub para protecci칩n adicional
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push vote image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/voting-app-vote:prod app/vote
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/voting-app-vote:prod

      - name: Build & push result image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/voting-app-result:prod app/result
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/voting-app-result:prod
      
      - name: Build & push worker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/voting-app-worker:prod app/worker
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/voting-app-worker:prod
          
      - name: Build & push seed-data image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/voting-app-seed-data:prod app/seed-data
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/voting-app-seed-data:prod

  # Job 3: Despliegue en Kubernetes
  kubernetes:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    environment: production # Usar entorno de GitHub para protecci칩n adicional
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.33.2'
          
      - name: Configure kubectl for EKS
        run: aws eks update-kubeconfig --name voting-cluster --region ${{ secrets.AWS_DEFAULT_REGION }}
        
      - name: Create namespace if not exists
        run: kubectl apply -f k8s/namespace-prod.yaml
        
      - name: Set environment variables and deploy
        env:
          NAMESPACE: prod
        run: |
          chmod +x ./scripts/apply-manifests.sh
          ./scripts/apply-manifests.sh
          
      - name: Verify deployment
        run: |
          echo "Waiting for pods to be ready..."
          kubectl wait --for=condition=ready pods -n prod --all --timeout=300s
          echo "Current pods status:"
          kubectl get pods -n prod
          echo "Current services status:"
          kubectl get services -n prod
          echo "Current ingress status:"
          kubectl get ingress -n prod
