name: CI â€“ Static Analysis & Docker Build (Dev)

on:
  push:
    branches: [develop]

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - service: vote
            path: app/vote
            type: python
          - service: result
            path: app/result
            type: node
          - service: seed-data
            path: app/seed-data
            type: python
          - service: worker
            path: app/worker
            type: csharp

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run static analysis for ${{ matrix.service }}
        working-directory: ${{ matrix.path }}
        run: |
          if [ "${{ matrix.type }}" = "python" ]; then
            pip install --user -r requirements-dev.txt
            flake8 . --format=json --output-file flake8-report.json || true

          elif [ "${{ matrix.type }}" = "node" ]; then
            npm install
            npm install eslint
            npx eslint . --format json --output-file eslint-report.json || true

          else
            dotnet tool install --global dotnet-format --version 5.1.225506 || true
            export PATH="$PATH:$HOME/.dotnet/tools"
            dotnet restore
            dotnet format --verify-no-changes --report dotnet-report.sarif || true
          fi

      - name: Upload Python report
        if: matrix.type == 'python'
        uses: actions/upload-artifact@v4
        with:
          name: flake8-${{ matrix.service }}
          path: ${{ matrix.path }}/flake8-report.json

      - name: Upload Node report
        if: matrix.type == 'node'
        uses: actions/upload-artifact@v4
        with:
          name: eslint-${{ matrix.service }}
          path: ${{ matrix.path }}/eslint-report.json

      - name: Upload C# report
        if: matrix.type == 'csharp'
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-${{ matrix.service }}
          path: ${{ matrix.path }}/dotnet-report.sarif
  docker:
    needs: [static-analysis]
    name: Build and push images to ECR
    runs-on: ubuntu-latest

    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION:    ${{ secrets.AWS_DEFAULT_REGION }}

    strategy:
      matrix:
        service: [ vote, result, seed-data, worker ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and push ${{ matrix.service }} service
        run: |
          REPO_NAME=voting-app-${{ matrix.service }}
          IMAGE_TAG=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME:dev
          docker build -t $IMAGE_TAG -f app/${{ matrix.service }}/Dockerfile app/${{ matrix.service }}
          docker push $IMAGE_TAG
